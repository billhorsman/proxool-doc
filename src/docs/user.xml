<!DOCTYPE book
  PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book>
  <bookinfo>
    <title>Proxool</title>
    <subtitle>User Guide</subtitle>
    <abstract>
      <para>
The User Guide is aimed at people who want to use Proxool in their Java applications.
      </para>
    </abstract>
  </bookinfo>

  <chapter id="quickstart">
    <title id="quickstart-title">Quick Start</title>
    <abstract>
      <para>
The simplest way of adding Proxool to your existing JDBC application.
      </para>
    </abstract>

    <para>
This document describes how to invoke Proxool. It assumes that you're familiar with the Java language in general and the <ulink url="http://java.sun.com/products/jdbc/">JDBC</ulink> API in particular. Please visit Sun's JDBC web site for information about JDBC.
    </para>
    <para>
Let's assume that you already have some code that connects to your existing JDBC driver. For example:
    </para>
    <programlisting linenumbering="numbered">
Connection connection = null;
try {
  Class.forName("org.hsqldb.jdbcDriver");
  try {
    connection = DriverManager.getConnection("jdbc:hsqldb:test");
  } catch (SQLException e) {
    LOG.error("Problem getting connection", e);
  }

  if (connection != null) {
    LOG.info("Got connection :)");
  } else {
    LOG.error("Didn't get connection, which probably means that no Driver accepted the URL");
  }

} catch (ClassNotFoundException e) {
  LOG.error("Couldn't find driver", e);
} finally {
  try {
    // Check to see we actually got a connection before we
    // attempt to close it.
    if (connection != null) {
      connection.close();
    }
  } catch (SQLException e) {
    LOG.error("Problem closing connection", e);
  }
}
    </programlisting>
    <para>
To start using Proxool you need only to change two lines of the previous code. Started by changing the JDBC Drvier on line 3 as follows:
    </para>
    <programlisting>
  Class.forName("<emphasis>org.hsqldb.jdbcDriver</emphasis>");
    </programlisting>
    <para>
Next change the JDBC URL on line 5 as follows:
    </para>
    <programlisting>
    connection = DriverManager.getConnection("jdbc:hsqldb:test");
    </programlisting>
    <para>
The JDBC URL for Proxool can be broken down into the following three sections:
    </para>
    <programlisting>
proxool.&lt;alias&gt;:&lt;delegate-class&gt;:&lt;delegate-url&gt;
    </programlisting>
    <variablelist>
      <varlistentry>
        <term>&lt;alias&gt;</term>
        <listitem>
          <para>
This is a unique label that we will use to reference the pool.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;delegate-class&gt;</term>
        <listitem>
          <para>
The JDBC driver Proxool should use to connect to the database. (The same one you were originally using).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>&lt;delegate-url&gt;</term>
        <listitem>
          <para>
The URL Proxool should use to connect to the database. (The same one you were originally using).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
That's it really. You might want to consider other ways of <link linkend="configuration">configuring</link> Proxool.
    </para>
  </chapter>

  <chapter id="documentation.howitworks">
    <title id="documentation.howitworks-title">How it works</title>
    <para>
Proxool acts as a proxy. That is, when you ask it to do something it delegates that task to another JDBC driver (you can use whatever driver you like). This has an important benefit: you can switch from any JDBC driver to Proxool by simply making a few configuration changes. The standard life cycle of asking the DriverManager for a Connection and then closing that Connection when you have finished with it remains unchanged.
    </para>
    <programlisting>
Class.forName("org.logicalcobwebs.proxool.ProxoolDriver");
connection = DriverManager.getConnection(url);
...
connection.close();
    </programlisting>
    <para>
When the ProxoolDriver gives you a Connection it actually gives you a ProxyConnection instead. The ProxyConnection does everything that a Connection does except that when you call the close() method it doesn't really close. Instead, it puts itself back into the pool.
    </para>
  </chapter>

  <chapter id="properties">
    <title id="properties-title">Properties</title>
    <abstract>
      <para>
How to configure your pool: ways to make it easier; changing the way the pool behaves.
      </para>
    </abstract>

    <para>
This is the full list of all the properties:
    </para>
    <variablelist>
      <varlistentry>
        <term>
          <varname>house-keeping-sleep-time</varname>
        </term>
        <listitem>
          <para>
How long the house keeping thread sleeps for (milliseconds). The house keeper is responsible for checking the state of all the connections and tests whether any need to be destroyed or created. <emphasis>Default is 30 seconds</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>house-keeping-test-sql</varname>
        </term>
        <listitem>
          <para>
If the house keeping thread finds and idle connections it will test them with this SQL statement. It should be <emphasis>very</emphasis> quick to execute. Something like checking the current date or something. If not defined then this test is omitted.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>maximum-connection-count</varname>
        </term>
        <listitem>
          <para>
The maximum number of connections to the database. <emphasis>Default is 15</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>maximum-connection-lifetime</varname>
        </term>
        <listitem>
          <para>
The maximum amount of time that a connection exists for before it is killed (milliseconds). <emphasis>Default is 4 hours</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>maximum-new-connections</varname>
        </term>
        <listitem>
          <para>
This is the maximum number of connections we can be building at any one time. That is, the number of new connections that have been requested but aren't yet available for use. Because connections can be built using more than one thread (for instance, when they are built on demand) and it takes a finite time between deciding to build the connection and it becoming available we need some way of ensuring that a lot of threads don't all decide to build a connection at once. (We could solve this in a smarter way - and indeed we will one day) <emphasis>Default is 10</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>minimum-connection-count</varname>
        </term>
        <listitem>
          <para>
The minimum number of connections we will keep open, regardless of whether anyone needs them or not. <emphasis>Default is 5</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>recently-started-threshold</varname>
        </term>
        <listitem>
          <para>
This helps us determine whether the pool status is up, down or overloaded. As long as at least one connection was started within this threshold (milliseconds) or there are some spare connections available then we assume the pool is up. <emphasis>Default is 60 seconds</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>overload-without-refusal-lifetime</varname>
        </term>
        <listitem>
          <para>
This helps us determine the pool status. If we have refused a connection within this threshold (milliseconds) then we are overloaded. <emphasis>Default is 60 seconds</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>maximum-active-time</varname>
        </term>
        <listitem>
          <para>
If the housekeeper comes across a thread that has been active for longer than this then it will kill it. So make sure you set this to a number bigger than your slowest expected response! <emphasis>Default is 5 minutes</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>verbose</varname>
        </term>
        <listitem>
          <para>
Either false (quiet) or true (loud). <emphasis>Default is false</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>trace</varname>
        </term>
        <listitem>
          <para>
If true then each SQL call gets logged (DEBUG level) along with the execution time. You can also get this information by registering a ConnectionListener (see ProxoolFacade). <emphasis>Default is false</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>fatal-sql-exception</varname>
        </term>
        <listitem>
          <para>
All SQLExceptions are caught and tested for containing this text fragment. If it matches than this connection is considered useless and it is discarded. Regardless of what happens the exception is always thrown again. This property behaves like a collection; you can set it more than once and each value is checked.
         </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>prototype-count</varname>
        </term>
        <listitem>
          <para>
If there are fewer than this number of connections available then we will build some more (assuming the maximum-connection-count is not exceeded). For example. Of we have 3 active connections and 2 available, but our prototype-count is 4 then it will attempt to build another 2. <emphasis>This differs from minimum-connection-count because it takes into account the number of active connections. minimum-connection-count is absolute and doesn't care how many are in use. prototype-count is the number of spare connections it strives to keep over and above the ones that are currently active. Default is 0</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>statistics</varname>
        </term>
        <listitem>
          <para>
The sample length when taking statistical information, comma-delimited. For example: '10s,15m' would mean take samples every 10 seconds and every 15 minutes. Valid units are s(econds), m(inutes), h(ours) and d(ays). <emphasis>Default is null (no statistics)</emphasis>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <varname>statistics-log-level</varname>
        </term>
        <listitem>
          <para>
Whether statistics are logged as they are produced. Range: DEBUG, INFO, WARN, ERROR, FATAL. <emphasis>Default is null (no logging)</emphasis>.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </chapter>

  <chapter id="configuration">
    <title id="configuration-title">Configuration</title>
    <abstract>
      <para>
A list of all the configurable properties and what they do.
      </para>
    </abstract>
    <para>
You can configure Proxool in lots of ways.
    </para>
    <orderedlist>
      <listitem>
        <para>
Passing a java.util.Properties object to the Driver when you request a Connection:
        </para>
        <programlisting>
Properties info = new Properties();
info.setProperty("proxool.maximum-connection-count", "20");
info.setProperty("proxool.house-keeping-test-sql", "select CURRENT_DATE");
info.setProperty("user", "sa");
info.setProperty("password", "");
String alias = "test";
String driverClass = "org.hsqldb.jdbcDriver";
String driverUrl = "jdbc:hsqldb:test";
String url = "proxool." + alias + ":" + driverClass + ":" + driverUrl;
connection = DriverManager.getConnection(url, info);
        </programlisting>
      </listitem>
      <listitem>
        <para>
Using an XML file. For instance:
        </para>
        <programlisting>
&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt;
&lt;!-- the proxool configuration can be embedded within your own application's.
Anything outside the "proxool" tag is ignored. --&gt;
&lt;something-else-entirely&gt;
  &lt;proxool&gt;
    &lt;alias&gt;xml-test&lt;/alias&gt;
    &lt;driver-url&gt;jdbc:hsqldb:.&lt;/driver-url&gt;
    &lt;driver-class&gt;org.hsqldb.jdbcDriver&lt;/driver-class&gt;
    &lt;driver-properties&gt;
      &lt;property name="user" value="sa"/&gt;
      &lt;property name="password" value=""/&gt;
    &lt;/driver-properties&gt;
    &lt;maximum-connection-count&gt;10&lt;/maximum-connection-count&gt;
    &lt;house-keeping-test-sql&gt;select CURRENT_DATE&lt;/house-keeping-test-sql&gt;
  &lt;/proxool&gt;
&lt;/something-else-entirely&gt;
        </programlisting>
        <para>
And then simply call the XML configurator (<ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/configuration/JAXPConfigurator.html">JAXPConfigurator</ulink>) in your startup code:
        </para>
        <programlisting>
JAXPConfigurator.configure("src/java-test/org/logicalcobwebs/proxool/configuration/test-no-ns.xml", false);
        </programlisting>
        <para>
(the false means non-validating)
        </para>
        <note>
          <para>
NOTE: you need to include a JAXP compliant XML parser to use this configuration method. For instance, <ulink url="http://xml.apache.org/crimson/">Crimson</ulink>, or <ulink url= "http://xml.apache.org/xerces2-j/">Xerces</ulink>.
          </para>
        </note>
      </listitem>
      <listitem>
        <para>
Using a properties (flat text) file. For instance
        </para>
        <programlisting>
jdbc-0.proxool.alias=property-test
jdbc-0.proxool.driver-url=jdbc:hsqldb:.
jdbc-0.proxool.driver-class=org.hsqldb.jdbcDriver
jdbc-0.user=sa
jdbc-0.password=
jdbc-0.proxool.maximum-connection-count=10
jdbc-0.proxool.house-keeping-test-sql=select CURRENT_DATE
        </programlisting>
        <para>
The first word (up to the first dot) must start with "jdbc", but it can be anything you like. Use unique names to identify each pool. Any property not starting with "jdbc" will be ignored. The properties prefixed with "proxool." will be used by Proxool while the properties that are not prefixed will be passed on to the delegate JDBC driver.
        </para>
        <para>
And then simply call the property configurator (<ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/configuration/PropertyConfigurator.html">PropertyConfigurator</ulink>) in your startup code:
        </para>
        <programlisting>
PropertyConfigurator.configure("src/java-test/org/logicalcobwebs/proxool/configuration/test.properties");
        </programlisting>
      </listitem>
      <listitem>
        <para>
Programmatically. For instance
        </para>
        <programlisting>
Class.forName("org.logicalcobwebs.proxool.ProxoolDriver");
Properties info = new Properties();
info.setProperty("proxool.maximum-connection-count", "10");
info.setProperty("proxool.house-keeping-test-sql", "select CURRENT_DATE");
info.setProperty("user", "sa");
info.setProperty("password", "");
String alias = "test";
String driverClass = "org.hsqldb.jdbcDriver";
String driverUrl = "jdbc:hsqldb:test";
String url = "proxool." + alias + ":" + driverClass + ":" + driverUrl;
ProxoolFacade.registerConnectionPool(url, info);
        </programlisting>
      </listitem>
      <listitem>
        <para>
Using <ulink url="http://jakarta.apache.org/avalon/">Avalon</ulink>  (choose this if you already use Avalon in your project). For instance:
        </para>
        <para>
role.config -
        </para>
        <programlisting>
&lt;role-list&gt;
  &lt;role
    name="org.logicalcobwebs.proxool.configuration.AvalonConfigurator"
    shorthand="proxool-config"
    default-class="org.logicalcobwebs.proxool.configuration.AvalonConfigurator"/&gt;
&lt;/role-list&gt;
        </programlisting>
        <para>
component.config -
        </para>
        <programlisting>
&lt;component-config&gt;
  &lt;proxool-config&gt;
    &lt;proxool&gt;
      &lt;alias&gt;avalon-test&lt;/alias&gt;
      &lt;driver-url&gt;jdbc:hsqldb:.&lt;/driver-url&gt;
      &lt;driver-class&gt;org.hsqldb.jdbcDriver&lt;/driver-class&gt;
      &lt;driver-properties&gt;
        &lt;property name="user" value="sa"/&gt;
        &lt;property name="password" value=""/&gt;
      &lt;/driver-properties&gt;
    &lt;/proxool&gt;
  &lt;/proxool-config&gt;
&lt;/component-config&gt;
        </programlisting>
        <para>
See <ulink url="api/org/logicalcobwebs/proxool/configuration/AvalonConfigurator.html">AvalonConfigurator</ulink>.
        </para>
      </listitem>
    </orderedlist>
  </chapter>

  <chapter id="logging">
    <title id="logging-title">Logging</title>
    <abstract>
      <para>
How to log what you want where you want.
      </para>
    </abstract>

    <para>
By default, all logging is done to stdout. This probably isn't what you want so it is wise to configure your logging to do something more sensible.
    </para>
    <para>
Proxool's logging component is a fork of Jakarta's Commons' <ulink url="hhttp://jakarta.apache.org/commons/logging.html">Logging</ulink> component (version 1.02).
    </para>
    <para>
"There are many logging APIs out there and it is difficult to choose among them. The Logging package is an ultra-thin bridge between different logging libraries. This removes compile-time and run-time dependencies on any particular logging package, and contributors may write Log implementations for the library of their choice."
    </para>
    <para>
The following logging libraries are supported directly:
    </para>
    <itemizedlist>
      <listitem>
        <para>
<ulink url="http://jakarta.apache.org/log4j/docs/index.html">Log4J</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
<ulink url="http://jakarta.apache.org/avalon/logkit/">LogKit</ulink>
        </para>
      </listitem>
      <listitem>
        <para>
<ulink url="http://java.sun.com/j2se/1.4/docs/api/java/util/logging/package-summary.html">JDK 1.4</ulink>
        </para>
      </listitem>
    </itemizedlist>
    <para>
However, there is no reason why you should write your own implementation of <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/logging/Log.html">Log</ulink> and log wherever you wish.
    </para>

    <section>
      <title>Log4J Configuration</title>
      <para>
As an example, this is how we configure Log4J for use when we run Proxool's unit tests.
      </para>
      <para>
First, create your configuration file (which we have called log4j.xml):
      </para>
      <programlisting>
&lt;?xml version="1.0" encoding="UTF-8" ?&gt;
&lt;!DOCTYPE log4j:configuration SYSTEM "log4j.dtd"&gt;

&lt;log4j:configuration&gt;

&lt;appender name="general" class="org.apache.log4j.DailyRollingFileAppender"&gt;
  &lt;param name="File" value="/var/log/proxool/general.log"/&gt;
  &lt;param name="DatePattern" value="'.'yyyy-MM-dd"/&gt;
  &lt;layout class="org.apache.log4j.PatternLayout"&gt;
      &lt;param name="ConversionPattern" value="%d{DATE} [%-5p] %c {%F:%L} - %m%n"/&gt;
  &lt;/layout&gt;
&lt;/appender&gt;

&lt;root&gt;
    &lt;priority value="DEBUG"/&gt;
    &lt;appender-ref ref="general"/&gt;
&lt;/root&gt;

&lt;/log4j:configuration&gt;
      </programlisting>
      <para>
This will log to /var/log/proxool/general.log and then archive the log every day to a new file.
      </para>
      <para>
You can easily log each pool to a different file. Just configure an appender for each pool and then add the following &lt;category&gt; element <emphasis>just before</emphasis> the &lt;root&gt; element. For example, to set up the log for the 'test' pool:
      </para>
      <programlisting>
&lt;category name="org.logicalcobwebs.proxool.test"&gt;
    &lt;appender-ref ref="test-appender"/&gt;
&lt;/category&gt;
      </programlisting>
    </section>

    <section>
      <title>Using Log4J's Chainsaw GUI log viewer</title>
      <para>
You might find it really useful to use Chainsaw (part of Log4J). It's a Java Swing application that will listen to log events. You can even set it up to work on a different machine. All you have to do is setup a special appender:
      </para>
      <programlisting>
&lt;appender name="chainsaw" class="org.apache.log4j.net.SocketAppender"&gt;
    &lt;param name="remoteHost" value="localhost"/&gt;
    &lt;param name="port" value="4445"/&gt;
    &lt;param name="locationInfo" value="true"/&gt;
&lt;/appender&gt;
      </programlisting>
      <para>
And then you just startup Chainsaw:
      </para>
      <programlisting>
java -classpath log4j.jar org.apache.log4j.chainsaw.Main
      </programlisting>
      <para>
Obviously, you should include the correct path to your log4j.jar.
      </para>
    </section>
  </chapter>

  <chapter id="admin">
    <title id="admin-title">Measuring performance</title>
    <abstract>
      <para>
 Measuring the performance of Proxool and your database.
      </para>
    </abstract>
    <para>
You can configure Proxool to collect statistics about how it is performing. You do this by setting the statistics property. For example, using the XML configurator a fragment of the XML might look like this:
    </para>
    <programlisting>
&lt;proxool&gt;
  &lt;alias&gt;test&lt;/alias&gt;
  &lt;driver-url&gt;jdbc:hsqldb:test&lt;/driver-url&gt;
  &lt;driver-class&gt;org.hsqldb.jdbcDriver&lt;/driver-class&gt;
  &lt;statistics&gt;1m,15m,1d&lt;/statistics&gt;
&lt;/proxool&gt;
    </programlisting>
    <para>
The statistics value is tokenized into three separate sets: '1m', '15m' and '1d'. These refer to the period between samples. The units are: s(econds), m(inutes), h(ours) and d(ays). So in this example, Proxool will take samples every minute, every 15 minutes and every day.
    </para>
    <para>
There are a four ways to access this information:
    </para>
    <orderedlist>
      <listitem>
        <para>
<emphasis>MonitorServlet.</emphasis> If you are using a web application that supports Java Servlets then you can configure your app to use this servlet. It gives you all sorts of information (see <link linkend="adminservlet">AdminServlet</link>). An example configuration would be:
        </para>
        <programlisting>
&lt;servlet&gt;
  &lt;servlet-name&gt;Admin&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.logicalcobwebs.proxool.admin.AdminServlet&lt;/servlet-class&gt;
&lt;/servlet&gt;

&lt;servlet-mapping&gt;
  &lt;servlet-name&gt;Admin&lt;/servlet-name&gt;
  &lt;url-pattern&gt;/admin&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;
        </programlisting>
      </listitem>
      <listitem>
        <para>
<emphasis>Ask for statistics and snapshots in your code.</emphasis> This is basically what the AdminServlet does. You can do exactly the same and present the information in whatever way you want.
        </para>
        <programlisting>
// Get back an array of all the statistics for a particular pool
StatisticsIF[] statisticsArray = ProxoolFacade.getStatistics(alias);
        </programlisting>
        <para>
So, in our example above, a statistics setting of "1m,15m,1d" would mean that this method would return 3 elements. See StatisticsIF in the API. You can also ask for each one explicitly:
        </para>
        <programlisting>
// Get back one single set of statistics
String token = "15m";
StatisticsIF statistics = ProxoolFacade.getStatistics(alias, token);
        </programlisting>
        <para>
A snapshot is information about the pool for a single point in time:
        </para>
        <programlisting>
// Get a snapshot
SnapshotIF snapshot = ProxoolFacade.getSnapshot(alias, true);
        </programlisting>
        <para>
The true parameter means get a detailed snapshot. That is information about what each individual connection is doing: whether it is active, the name of the thread that used it, how long it was active for, etc.. See <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/admin/StatisticsIF.html">SnapshotIF</ulink> in the API.
        </para>
      </listitem>
      <listitem>
        <para>
<emphasis>Listen for statistics.</emphasis> By registering a listener you will receive statistics as soon as they are produced:
        </para>
        <programlisting>
...
StatisticsListenerIF myStatisticsListener = new MyStatisticsListener();
ProxoolFacade.addStatisticsListener(myStatisticsListener);
...

class MyStatisticsListener implements StatisticsListenerIF {
  public void statistics(String alias, StatisticsIF statistics) {
    // Do whatever you want
  }
}
        </programlisting>
      </listitem>
      <listitem>
        <para>
<emphasis>Just use the log.</emphasis> The log outputs statistics in the following format:
        </para>
        <programlisting>
16:17:55 - 16:18:00, s:17:3.40/s, r:0:0.00/s, a:9ms/0.30
        </programlisting>
        <para>
This means that the statistics apply to the time from 16:17:55 to 16:18:00 (5 seconds). In that time we served 17 connections (at 3.40 per second) and refused none. The average time each connection was active was 9ms and, on average, 0.3 connections were active at any one time.
        </para>
      </listitem>
    </orderedlist>
  </chapter>

  <chapter id="adminservlet">
    <title id="adminservlet-title">How to use the AdminServlet</title>
    <abstract>
      <para>
A useful Servlet that will output the definition and performance of each pool.
      </para>
    </abstract>
    <para>
This is an example output from the AdminServlet. See Admin for how to set this servlet up. (Obviously, this is only applicable if you are using Proxool in a Servlet environment.)
    </para>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/adminservlet1.png"/>
      </imageobject>
    </mediaobject>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/adminservlet2.png"/>
      </imageobject>
    </mediaobject>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/adminservlet3.png"/>
      </imageobject>
    </mediaobject>
  </chapter>

  <chapter id="events">
    <title id="events-title">Listening to Proxool events</title>
    <abstract>
      <para>
Listening to events that happen to each pool.
      </para>
    </abstract>
    <para>
You can register the following listeners:
    </para>

    <bridgehead renderas="sect2">
      <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/ConnectionListenerIF.html">
        ConnectionListenerIF
      </ulink>
    </bridgehead>
    <para>
Listen to the activity of each connection. When it is born (when a new Connection is made), everytime it executes, when it fails (and what the command was that it failed on), and when it dies (when we finally throw the Connection away).
    </para>
    <bridgehead renderas="sect2">
      <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/StateListenerIF.html">
        StateListenerIF
      </ulink>
    </bridgehead>
    <para>
Monitors the state of the pool so you can see whether it is quiet, busy, overloaded, or down.
    </para>
    <bridgehead renderas="sect2">
      <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/ConfigurationListenerIF.html">
        ConfigurationListenerIF
      </ulink>
    </bridgehead>
    <para>
Listens to any changes made to the <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/ConnectionPoolDefinitionIF.html">definition</ulink> giving you the opportunity to persist a definition.
    </para>
    <bridgehead renderas="sect2">
      <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/StatisticsListenerIF.html">
        StatisticsListenerIF
      </ulink>
    </bridgehead>
    <para>
Listen for new <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/admin/StatisticsIF.html">statistics</ulink> as they are produced.
    </para>
  </chapter>

  <chapter id="servlets">
    <title id="sevlets-title">Setting up Proxool in a Servlet environment</title>

    <section>
      <title>Configuration with a servlet</title>

      <para>
You can configure Proxool using a Servlet too. There are three ways:
      </para>
      <orderedlist>
        <listitem>
          <para>
XML file. Delegates to <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/configuration/JAXPConfigurator.html">JAXPConfigurator</ulink> passing in the filename. If the filename is not absolute then it is prepended with the application directory.
          </para>
          <programlisting>
&lt;servlet&gt;
  &lt;servlet-name&gt;ServletConfigurator&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.logicalcobwebs.proxool.configuration.ServletConfigurator&lt;/servlet-class&gt;
  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;xmlFile&lt;/param-name&gt;
    &lt;param-value&gt;WEB-INF/proxool.xml&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
          </programlisting>
        </listitem>
        <listitem>
          <para>
Property file. Delegates to <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/configuration/PropertyConfigurator.html">PropertyConfigurator</ulink> passing in the filename. If the filename is not absolute then it is prepended with the application directory.
          </para>
          <programlisting>
&lt;servlet&gt;
  &lt;servlet-name&gt;ServletConfigurator&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.logicalcobwebs.proxool.configuration.ServletConfigurator&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;propertyFile&lt;/param-name&gt;
    &lt;param-value&gt;WEB-INF/proxool.properties&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
          </programlisting>
        </listitem>
        <listitem>
          <para>
Init parameters. Delegates to <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/configuration/PropertyConfigurator.html">PropertyConfigurator</ulink> by passing in a new Properties object based on the servlet's init parameters.
          </para>
          <programlisting>
&lt;servlet&gt;
  &lt;servlet-name&gt;ServletConfigurator&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.logicalcobwebs.proxool.configuration.ServletConfigurator&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;jdbc-0.proxool.alias&lt;/param-name&gt;
    &lt;param-value&gt;test&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;jdbc-0.proxool.driver-url&lt;/param-name&gt;
    &lt;param-value&gt;jdbc:hsqldb:.&lt;/param-value&gt;
  &lt;/init-param&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;jdbc-0.proxool.driver-class&lt;/param-name&gt;
    &lt;param-value&gt;org.hsqldb.jdbcDriver&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
          </programlisting>
        </listitem>
      </orderedlist>
      <para>
The ServletConfigurator also shuts down Proxool by removing all connection pools. If you want to disable this behaviour then use:
      </para>
      <programlisting>
&lt;servlet&gt;
  &lt;servlet-name&gt;ServletConfigurator&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.logicalcobwebs.proxool.configuration.ServletConfigurator&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;autoShutdown&lt;/param-name&gt;
    &lt;param-value&gt;false&lt;/param-value&gt;
  &lt;/init-param&gt;
&lt;/servlet&gt;
      </programlisting>
    </section>
    <section>
      <title>Installing Proxool in your web application</title>
      <para>
If you run more than one web application in your servlet environment then you should consider where you install the Proxool JAR. There are two options:
      </para>
      <orderedlist>
        <listitem>
          <para>
In the web application's lib directory (WEB-INF/lib). This has the following consequences:
          </para>
          <para>
Proxool pools will not be shared across web applications.
          </para>
          <para>
When you reload (or restart) your web application then a new instance of Proxool is started. Unless you explicitly shutdown the old one then it will continue running and continue to use resources (both locally and on the database). You can shutdown the pool by either using the ServletConfigurator, above, or calling <ulink url="http://proxool.sourceforge.net/api/org/logicalcobwebs/proxool/ProxoolFacade.html#shutdown(int)">ProxoolFacade.shutdown</ulink>.
          </para>
        </listitem>
        <listitem>
          <para>
In the servlet container's common lib directory or elsewhere on the classpath. This has the following consequences:
          </para>
          <para>
You can share common pools between web applications.
          </para>
          <para>
When you reload your web application the pool keeps running. The only way to restart the pool is to either start and stop your servlet container or two explicitly shut it down and re-configure it.
          </para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>
</book>